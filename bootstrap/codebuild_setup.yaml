AWSTemplateFormatVersion: '2010-09-09'
Description: "Create CodeBuild project with required IAM/SG/SSM/CW Logs configuration"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Top-level environment configuration"
      Parameters:
      - NameString
    -
      Label:
        default: "VPC configuration for CodeBuild"
      Parameters:
      - VpcID
      - PrivateSubnetIDs
    -
      Label:
        default: "Proxy configuration"
      Parameters:
      - HttpProxyParam
      - HttpsProxyParam
      - NoProxyParam
    -
      Label:
        default: "IAM configuration"
      Parameters:
      - IAMCodeBuildPoliciesARNs
    -
      Label:
        default: "Git repository configuration (e.g. Bitbucket)"
      Parameters:
      - ConfigRepoURL
      - GitSSHPrivateKey

Parameters:
    NameString:
        Description: String that will be used as basis for naming S3 bucket, CB project, etc.
        Type: String
        Default: vpc-endpoint-services-nlb
    VpcID:
      Type: AWS::EC2::VPC::Id
      Description: VPC in which CB project will run
    PrivateSubnetIDs:
      Type: List<AWS::EC2::Subnet::Id>
      Description: List of subnets in which CB will run (only private are supported)
    HttpProxyParam:
      Description: Full string for IP or DNS name of http_proxy parameter (including http:// and optional port)
      Type: String
    HttpsProxyParam:
      Description: Full string for IP or DNS name of https_proxy parameter (including http(s):// and optional port)
      Type: String
    NoProxyParam:
      Description: Full string for IP(s) or DNS name(s) of no_proxy parameter (comma separated list, defaults are recommended at minimum).
      Type: String
      Default: 169.254.169.254,169.254.170.2,logs.eu-central-1.amazonaws.com,codecommit.eu-central-1.amazonaws.com,git-codecommit.eu-central-1.amazonaws.com,ssm.eu-central-1.amazonaws.com
    IAMCodeBuildPoliciesARNs:
      Description: List of IAM policy ARNs to be attached to CodeBuild role (comma separated string, no spaces)
      Default: 'arn:aws:iam::aws:policy/AdministratorAccess'
      Type: String
    GitSSHPrivateKey:
      NoEcho: 'true'
      Description: Private SSH key to access repositories (read-only is sufficient)
      Type: String
    ConfigRepoURL:
      Description: Full ssh URL to configuration repository (starting with ssh://)
      Type: String

Resources:
####################################
# PARAMETERS IN SSM PARAMETER STORE:
####################################
  HttpProxyParamParameterStore:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${NameString}/networking/http_proxy"
      Type: "String"
      Value: !Ref HttpProxyParam

  HttpsProxyParamParameterStore:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${NameString}/networking/https_proxy"
      Type: "String"
      Value: !Ref HttpsProxyParam

  NoProxyParamParameterStore:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${NameString}/networking/no_proxy"
      Type: "String"
      Value: !Ref NoProxyParam

  ConfigRepoURLParameterStore:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${NameString}/gitrepo/config_repo_url"
      Type: "String"
      Value: !Ref ConfigRepoURL

  GitSSHPrivateKeyParameterStore:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${NameString}/gitrepo/id_rsa"
      Type: "String"
      Value: !Ref GitSSHPrivateKey

####################################
# CUSTOM RESOURCE TO TRIGGER CODEBUILD:
####################################
  MyTriggerCodeBuild:
    Type: Custom::TriggerCodeBuild
    Properties:
      ServiceToken: !GetAtt TriggerCodeBuildLambda.Arn
      ProjectName: !Ref CodeBuildProject

# Custom resource to create/update/delete SSM securestring parameters
  TriggerCodeBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Runtime: python3.7
      Timeout: 120
      Role: !GetAtt TriggerCodeBuildLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import logging
          import boto3
          import cfnresponse


          codebuild_client = boto3.client('codebuild')

          DEFAULT_LOGGING_LEVEL = logging.INFO
          logging.basicConfig(format='[%(levelname)s] %(message)s', level=DEFAULT_LOGGING_LEVEL)
          logger = logging.getLogger(__name__)
          logger.setLevel(DEFAULT_LOGGING_LEVEL)

          def start_build(resource_properties):
              project_name = resource_properties.get('ProjectName')
              if (not project_name):
                  raise ValueError(
                    'missing ProjectName resource property'
                  )

              response = codebuild_client.start_build(
                  projectName=project_name
              )
              return response

          def handler(event, context):
              logger.info('event: {}'.format(json.dumps(event)))
              request_type = event.get('RequestType')
              resource_properties = event.get('ResourceProperties')

              response = {}
              response_status = cfnresponse.SUCCESS
              request_id = ''
              reason = ''

              if (request_type in ['Create', 'Update']):
                  try:
                      start_build_response = start_build(resource_properties)
                      logger.info(start_build_response)
                      #'logger.info(
                      #    'start_build response: {}'.format(
                      #        json.dumps(start_build_response)
                      #    )
                      #)
                      # only return specific fields to prevent "response object is too long" errors
                      response = {
                        'build_id':  start_build_response['build']['id'],
                        'project_name':  start_build_response['build']['projectName'],
                        'arn':  start_build_response['build']['arn'],
                      }
                      response_status = cfnresponse.SUCCESS
                      request_id = start_build_response['ResponseMetadata']['RequestId']
                      reason = 'Create'
                  except Exception as e:
                      error = 'failed to start build: {}'.format(e)
                      logger.error(error)
                      response_status = cfnresponse.FAILED
                      reason = error
                      pass

              cfnresponse.send(
                  event,
                  context,
                  response_status,
                  response,
                  request_id,
                  reason
              )


####################################
# IAM:
####################################
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        !Split [",", !Ref IAMCodeBuildPoliciesARNs]

  TriggerCodeBuildLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            Resource: !GetAtt CodeBuildProject.Arn


####################################
# VPC resources:
####################################
  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcID
      GroupDescription: CodeBuild SecurityGroup


####################################
# CloudWatch Logs 
####################################
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup


####################################
# CodeBuild:
####################################
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref NameString
      Description: Run eksctl that deploys EKS cluster in VPC
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:1.0
        EnvironmentVariables:
        - Name: HTTP_PROXY
          Value: !Ref HttpProxyParamParameterStore
          Type: PARAMETER_STORE
        - Name: HTTPS_PROXY
          Value: !Ref HttpsProxyParamParameterStore
          Type: PARAMETER_STORE
        - Name: NO_PROXY
          Value: !Ref NoProxyParamParameterStore
          Type: PARAMETER_STORE
        - Name: http_proxy
          Value: !Ref HttpProxyParamParameterStore
          Type: PARAMETER_STORE
        - Name: https_proxy
          Value: !Ref HttpsProxyParamParameterStore
          Type: PARAMETER_STORE
        - Name: no_proxy
          Value: !Ref NoProxyParamParameterStore
          Type: PARAMETER_STORE
        - Name: GIT_CONFIGURATION_REPO_URL 
          Value: !Ref ConfigRepoURLParameterStore
          Type: PARAMETER_STORE
        - Name: GIT_SSH_KEY
          Value: !Ref GitSSHPrivateKeyParameterStore
          Type: PARAMETER_STORE
      TimeoutInMinutes: 30
      VpcConfig:
        VpcId: !Ref VpcID
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
        Subnets:
          !Ref PrivateSubnetIDs
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
          phases:
            install:
              commands:
                - echo "Installing eksctl"
                - curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                - mv /tmp/eksctl /usr/local/bin
                - echo "Installing other dependencies"
                - apt update
                - apt -y install dnsutils jq
                - echo "Adding and converting ssh key for git repository"
                - mkdir -p ~/.ssh/
                - echo "$GIT_SSH_KEY" > ~/.ssh/id_rsa_source
                - cat ~/.ssh/id_rsa_source #DEBUG
                - if grep -q "BEGIN OPENSSH" ~/.ssh/id_rsa_source; then echo "-----BEGIN OPENSSH PRIVATE KEY-----\n`cat ~/.ssh/id_rsa_source |cut -c 37- |rev | cut -c 35- |rev |tr ' ' '\n'`\n-----END OPENSSH PRIVATE KEY-----\n" > ~/.ssh/id_rsa; else echo "-----BEGIN RSA PRIVATE KEY-----\n`cat ~/.ssh/id_rsa_source |cut -c 33- |rev | cut -c 31- |rev |tr ' ' '\n'`\n-----END RSA PRIVATE KEY-----\n" > ~/.ssh/id_rsa; fi
                - chmod 600 ~/.ssh/id_rsa
                - cat ~/.ssh/id_rsa #DEBUG
            build:
              commands:
                - env #DEBUG
                - echo "Cloning configuration repository"
                - git clone $GIT_CONFIGURATION_REPO_URL eksctl
                - cd eksctl
                - eksctl


Outputs:
  CodeBuildURL:
    Description: URL to CodeBuild project that will run eksctl
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codebuild/projects/${CodeBuildProject}"
